init()				GapList.create()				new GapList()
													new GapList(int capacity)
init(Collection<E>)	GapList.create(Collection<E>)	new GapList(Collection<E>)
init(E ...)			GapList.create(E ...)

Single element:
get(index), remove(index), set(index, value), add(value), add(index, value),

Multiple elements:

create()
createArray(...)
createAll(collection)
createMult(num, elem)

clear()
initArray(...)
initAll(collection)
initMult(num, elem)

addAll(collection), addAll(int, collection)
addArray(...),      addArrayAt(int, ...)
addMult(num, elem), addMult(int, num, elem)

setAll(index, collection)
setArray(index, ...)
setMult(index, num, elem)

putAll(index, collection)
putArray(index, ...)
putMult(index, num, elem)



E[] getArray(index, length) --> DELETE

List get(index, length)
List getWhere(cond)

List extract(index, length)
List extractWhere(cond)

List erase(index, length)
List eraseWhere(cond)

void remove(index, length)
void removeAll(Collection)
void removeWhere(cond)

void retain(index, length)
void retainAll(Collection)
void retainWhere()

void copy(int srcIndex, int dstIndex, int len)
void move(int srcIndex, int dstIndex, int len)
void drag(int srcIndex, int dstIndex, int len)

void swap(int index1, int index2, int len)

void copy(srcIndex, dstIndex, 

void transfer(int srcIndex, int dstIndex, int len, mode=copy/move/drag/swap)
void transfer(int srcIndex, int len, mode=copy/move/drag/swap, Collection dst, int dstIndex, mode=add/set/put)

replace(index, 0, collection) = addAll(index, collection)
replace(index, collection.size, collection) = setAll(index, collection)
replace(index, length, null) = remove(index, length)
replace(index, min(this.size-index, collection.size, collection) = merge(index, collection)
replace(0, this.size, collection) = init(collection)

replaceAll(index, len, Collection dst)
replaceArray(index, len, E ...)
replaceMult(index, len, E elem)

replaceCopy(index, len, Collection dst, dstIndex, dstLen)
replaceMove(int
replaceRemove(int

replaceSwap(index, len, Collection dst, dstIndex)

copyReplace(int srcIndex, 

static void swap(IList<E> src, int srcIndex, IList<E> dst, int dstIndex, int len)


static void copy(IList<E> src, int srcIndex, IList<? super E> dst, int dstIndex, int len)
static void move(IList<E> src, int srcIndex, IList<? super E> dst, int dstIndex, int len)





static void transfer(
	IList<E> list1, int index1, int len1, none/null/remove/swap
	IList<E> list2, int index2, int len2


source part:
- copy: leave unchanged
- move: set to null
- drag: remove

destination part:
- add
- set
- put

copyAdd / moveAdd
copySet / moveSet
copyPut / movePut

resize(size, elem)


merge(index, len, collection, index, len, mergeMode

replace(index, length, collection)

Forwarding:

read:
size(), get(), doGet(), doGetAll(), capacity
equals, hashcode: are implemented in terms of size() and doGet()

write:
doAdd, doAddAll, doRemove, doRemoveAll, doSet, doSetAll, doReSet, doModify
sort(int, int, Comparator), binarySearch(int, int, Object, Comparator)
clone



